{\rtf1\ansi\ansicpg949\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red147\green0\blue147;\red250\green251\blue252;\red27\green31\blue34;
\red7\green68\blue184;\red14\green112\blue174;\red66\green147\blue62;\red83\green149\blue74;}
{\*\expandedcolortbl;;\cssrgb\c65098\c14902\c64314;\cssrgb\c98431\c98824\c99216;\cssrgb\c14118\c16078\c18039;
\cssrgb\c0\c36078\c77255;\cssrgb\c392\c51765\c73725;\cssrgb\c31373\c63137\c30980;\cssrgb\c38824\c63922\c36078;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
from\cf4  itertools \cf2 import\cf4  combinations\
\cf2 from\cf4  collections \cf2 import\cf4  defaultdict\
\cf2 from\cf4  bisect \cf2 import\cf4  bisect_left\
\
#https://school.programmers.co.kr/learn/courses/30/lessons/72412\
#https://velog.io/@dogcu/
\f1 \'c7\'c1\'b7\'ce\'b1\'d7\'b7\'a1\'b8\'d3\'bd\'ba
\f0 -
\f1 \'bc\'f8\'c0\'a7
\f0 -
\f1 \'b0\'cb\'bb\'f6
\f0 \cf2 \
def\cf4  \cf5 solution\cf4 (information, queries):\
    answer \cf6 =\cf4  []\
    dic \cf6 =\cf4  defaultdict(\cf7 list\cf4 )\
    \cf2 for\cf4  info \cf2 in\cf4  information:\
        info \cf6 =\cf4  info.split()\
        condition \cf6 =\cf4  info[:\cf6 -\cf8 1\cf4 ]  \
        score \cf6 =\cf4  \cf7 int\cf4 (info[\cf6 -\cf8 1\cf4 ])\
        \cf2 for\cf4  i \cf2 in\cf4  \cf7 range\cf4 (\cf8 5\cf4 ):\
            case \cf6 =\cf4  \cf7 list\cf4 (combinations([\cf8 0\cf4 ,\cf8 1\cf4 ,\cf8 2\cf4 ,\cf8 3\cf4 ], i))\
            \cf2 for\cf4  c \cf2 in\cf4  case:\
                tmp \cf6 =\cf4  condition.copy()\
                \cf2 for\cf4  idx \cf2 in\cf4  c:\
                    tmp[idx] \cf6 =\cf4  \cf7 "-"\cf4 \
                key \cf6 =\cf4  \cf7 ''\cf4 .join(tmp)\
                dic[key].append(score) \
\
    \cf2 for\cf4  value \cf2 in\cf4  dic.values():\
        value.sort()   \
\
    \cf2 for\cf4  query \cf2 in\cf4  queries:\
        query \cf6 =\cf4  query.replace(\cf7 "and "\cf4 , \cf7 ""\cf4 )\
        query \cf6 =\cf4  query.split()\
        target_key \cf6 =\cf4  \cf7 ''\cf4 .join(query[:\cf6 -\cf8 1\cf4 ])\
        target_score \cf6 =\cf4  \cf7 int\cf4 (query[\cf6 -\cf8 1\cf4 ])\
        count \cf6 =\cf4  \cf8 0\cf4 \
        \cf2 if\cf4  target_key \cf2 in\cf4  dic:\
            target_list \cf6 =\cf4  dic[target_key]\
            idx \cf6 =\cf4  bisect_left(target_list, target_score)\
            count \cf6 =\cf4  \cf7 len\cf4 (target_list) \cf6 -\cf4  idx\
        answer.append(count)      \
    \cf2 return\cf4  answer}